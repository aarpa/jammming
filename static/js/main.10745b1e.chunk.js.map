{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","renderSearchButton","bind","assertThisInitialized","searchSpotify","handleTermChange","isLoading","react_default","a","createElement","onClick","eventObject","setState","term","target","value","onSearch","className","placeholder","onChange","React","Component","Track","renderAction","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","renderSaveButton","onNameChange","postStatus","onSave","playlistName","playlist","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expirationTimeMatch","expirationTime","setTimeout","history","pushState","concat","search","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","userId","playlistId","Content-Type","method","body","JSON","stringify","uris","App","isPosting","addTrackToList","removeTrackFromList","moveTrackToSearchResults","moveTrackToPlaylist","updatePlaylistName","resetPlaylist","_this2","list","some","savedTrack","copiedList","toConsumableArray","unshift","trackIndex","findIndex","splice","updatedResults","updatedPlaylist","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10745b1e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.renderSearchButton = this.renderSearchButton.bind(this);\r\n    this.searchSpotify = this.searchSpotify.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  renderSearchButton() {\r\n    if (this.props.isLoading) {\r\n      return <span>SEARCHING...</span>\r\n    } else {\r\n      return <span onClick={this.searchSpotify}>SEARCH</span>\r\n    }\r\n  }\r\n\r\n  handleTermChange(eventObject) {\r\n    this.setState({term: eventObject.target.value});\r\n  }\r\n\r\n  searchSpotify() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n        {this.renderSearchButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderAction = this.renderAction.bind(this);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <span className=\"Track-action\" onClick={this.removeTrack}>-</span>\r\n    } else {\r\n      return <span className=\"Track-action\" onClick={this.addTrack}>+</span>\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {\r\n          this.props.tracks.map(track => {\r\n            return <Track\r\n              track={track}\r\n              key={track.id}\r\n              onAdd={this.props.onAdd}\r\n              onRemove={this.props.onRemove}\r\n              isRemoval={this.props.isRemoval} />;\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList\r\n          tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.renderSaveButton = this.renderSaveButton.bind(this);\r\n  }\r\n\r\n  handleNameChange(eventObject) {\r\n    this.props.onNameChange(eventObject.target.value)\r\n  }\r\n\r\n  renderSaveButton() {\r\n    if (this.props.postStatus) {\r\n      return <span className=\"Playlist-save\">SAVING...</span>\r\n    } else {\r\n      return <span className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</span>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input\r\n          placeholder={'New Playlist'}\r\n          value={this.props.playlistName}\r\n          onChange={this.handleNameChange} />\r\n        <TrackList\r\n          tracks={this.props.playlist}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true} />\r\n        {this.renderSaveButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","let accessToken = '';\r\nconst clientId = '96cb1eebc62a4c41bb8aa254b8b77eaa';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken !== '') { // access token is already set\r\n      return accessToken;\r\n    }\r\n\r\n    // access token is not set, so check if it exists in URL\r\n    let accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    let expirationTimeMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    // if they exist in URL, extract the access token and the expiration time\r\n    if (accessTokenMatch && expirationTimeMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      let expirationTime = expirationTimeMatch[1];\r\n\r\n      // reset access token after expiration time\r\n      window.setTimeout(function() {\r\n        accessToken = '';\r\n      }, expirationTime * 1000);\r\n\r\n       // clear out URL path\r\n      window.history.pushState({}, null, '/');\r\n      return accessToken;\r\n    } else {\r\n      // if access token doesn't exist in URL, redirect to spotify authorization page\r\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${this.getAccessToken()}`\r\n      }\r\n    }).then(response => response.json()).then(jsonResponse => {\r\n      if (jsonResponse.tracks) {\r\n        return jsonResponse.tracks.items.map(track => {\r\n          return {\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n          };\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  savePlaylist(name, trackURIs) {\r\n    if (name !== '' && trackURIs !== '') {\r\n      let userId = '';\r\n      let playlistId = '';\r\n\r\n      // GET request for userId\r\n      return fetch('https://api.spotify.com/v1/me', {\r\n        headers: {\r\n          Authorization: `Bearer ${this.getAccessToken()}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n\r\n        // POST request to create playlist on user's Spotify account\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.getAccessToken()}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            name: name\r\n          })\r\n        })\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        playlistId = jsonResponse.id;\r\n\r\n        // POST request to add tracks to previously created playlist on Spotify account\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.getAccessToken()}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            uris: trackURIs\r\n          })\r\n        });\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      searchResults: [],\n      playlistName: '',\n      playlist: [],\n      isPosting: false\n    };\n    this.searchSpotify = this.searchSpotify.bind(this);\n    this.addTrackToList = this.addTrackToList.bind(this);\n    this.removeTrackFromList = this.removeTrackFromList.bind(this);\n    this.moveTrackToSearchResults = this.moveTrackToSearchResults.bind(this);\n    this.moveTrackToPlaylist = this.moveTrackToPlaylist.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.resetPlaylist = this.resetPlaylist.bind(this);\n  }\n\n  searchSpotify(term) {\n    this.setState({isLoading: true});\n    Spotify.search(term).then(tracks => {\n      this.setState({\n        searchResults: tracks,\n        isLoading: false\n      });\n    });\n  }\n\n  addTrackToList(track, list) {\n    // create copy of passed list to avoid direct modification of state\n    if (list.some(savedTrack => savedTrack.id === track.id)) {\n      return list;\n    }\n    let copiedList = [...list];\n    copiedList.unshift(track);\n    return copiedList;\n  }\n\n  removeTrackFromList(track, list) {\n    // create copy of playlist to avoid direct modification of state\n    let copiedList = [...list];\n    let trackIndex = copiedList.findIndex(savedTrack => savedTrack.id === track.id);\n    copiedList.splice(trackIndex, 1);\n    return copiedList;\n  }\n\n  moveTrackToSearchResults(track) {\n    let updatedResults = this.addTrackToList(track, this.state.searchResults);\n    let updatedPlaylist = this.removeTrackFromList(track, this.state.playlist);\n    this.setState({\n        searchResults: updatedResults,\n        playlist: updatedPlaylist\n      });\n  }\n\n  moveTrackToPlaylist(track) {\n    let updatedResults = this.removeTrackFromList(track, this.state.searchResults);\n    let updatedPlaylist = this.addTrackToList(track, this.state.playlist);\n    this.setState({\n        searchResults: updatedResults,\n        playlist: updatedPlaylist\n      });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlist.map(track => track.uri);\n    this.setState({isPosting: true});\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.resetPlaylist();\n    });\n  }\n\n  resetPlaylist() {\n    this.setState({\n      playlistName: '',\n      playlist: [],\n      isPosting: false\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar\n            isLoading={this.state.isLoading}\n            onSearch={this.searchSpotify} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.moveTrackToPlaylist} />\n            <Playlist\n              postStatus={this.state.isPosting}\n              playlistName={this.state.playlistName}\n              playlist={this.state.playlist}\n              onRemove={this.moveTrackToSearchResults}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}